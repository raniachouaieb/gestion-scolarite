<?php

namespace App\Http\Controllers\Dashboard;

use App\Helpers\BulletinFileHelper;
use App\Helpers\FileHelper;
use Symfony\Component\Mime\Exception\InvalidArgumentException;
use App\Http\Controllers\Controller;
use App\Models\Bulletin;
use App\Models\BulletinFile;
use App\Models\MediaFile;

use App\Models\Student;

use Exception;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Http\Request;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Str;

class MediaController extends Controller
{

    public function sendError($message, $data = [])
    {
        $data['uploaded'] = 0;
        $data['error'] = [
            "message" => $message
        ];
        return parent::sendError($message, $data);
    }

    public function sendSuccess($data = [], $message = '')
    {
        $data['uploaded'] = 1;

        if (!empty($data['data']->file_name)) {
            $data['fileName'] = $data['data']->file_name;
            $data['url'] = BulletinFileHelper::url($data['data']->id, 'full');
        }
        return parent::sendSuccess($data, $message); // TODO: Change the autogenerated stub
    }


    public function store(Request $request,$value,$studentid,$semesterid)
    {

        $ckEditor = $request->query('ckeditor');

        $fileName = 'file';
        if ($ckEditor) $fileName = 'upload';

        $file = $request->file($fileName);


        $file_type = $request->input('type');
        //Log::info($file_type);
        if (empty($file)) {
            return $this->sendError(__("Please select file"));
        }
       try {
            static::validateFile($file, $file_type);
        } catch (Exception $exception) {
            return $this->sendError($exception->getMessage());
        }
        $folder = '';

        $extension=$file->getClientOriginalExtension();



        if (($extension=='pdf')&&($value=='bulletin')) {

           $eleve = Student::findorfail($studentid);
            $bulletin=Bulletin::doGetListTrimesters();

            $folder ='bulletins/';


            $newFileName=$eleve->last_name.' '.$eleve->first_name.' '.$bulletin[$semesterid-1];

            if (empty($newFileName)) $newFileName = md5($file->getClientOriginalName());

            $i = 0;

            do {
                $newFileName2 = $newFileName . ($i ? $i : '');
                $testPath =$folder . '/' . $newFileName2 . '.' . $file->getClientOriginalExtension();
                $i++;

            } while (Storage::disk('bulletins')->exists($testPath));


            $check = $file->storeAs($folder, $newFileName2 . '.' . $file->getClientOriginalExtension());

            if ($check) {

                try {

                    $fileObj=new BulletinFile();

                    $fileObj->file_name = $newFileName2;
                    $fileObj->file_path = $check;
                    $fileObj->file_type = $file->getMimeType();
                    $fileObj->file_extension = $file->getClientOriginalExtension();
                    $fileObj->save();
                    $file->move($folder, $newFileName2 . '.' . $file->getClientOriginalExtension());

                    return $this->sendSuccess(['data' => $fileObj]);
                } catch (Exception $exception) {
                    Storage::disk('bulletins')->delete($check);
                    return $this->sendError($exception->getMessage());
                }
            }

        }
        return $this->sendError(__("Can not store : File type are not allowed"));
    }

    /**
     * @param $file UploadedFile
     * @param $group string
     *
     * @return bool
     *
     * @throws Exception
     */
    public static function validateFile($file, $group = "default")
    {
        $allowedExts = [
            'jpg',
            'jpeg',
            'bmp',
            'png',
            'gif',
            'zip',
            'rar',
            'pdf',
            'xls',
            'xlsx',
            'txt',
            'doc',
            'docx',
            'ppt',
            'pptx',
            'webm',
            'mp4',
            'mp3',
            'flv',
            'vob',
            'avi',
            'mov',
            'wmv',
            'svg',

        ];
        $allowedExtsImage = [
            'jpg',
            'jpeg',
            'bmp',
            'png',
            'gif',
            'svg',

        ];
        $oneMb = 1048576;
        $uploadConfigs = [
            'default' => [
                'types' => $allowedExts,
                "max_size" => 80 * $oneMb,
                "max_width" => 2500,
                "max_height" => 2500
                // 20MB
            ],
            'image' => [
                'types' => $allowedExtsImage,
                "max_size" => 80 * $oneMb,
                "max_width" => 2500,
                "max_height" => 2500
                // 20MB
            ],
            'video' => [
                "types" => [
                    'mp4', 'ogv', 'webm', 'webvtt'
                ],
                "max_size" => 500 * $oneMb,
            ],
            'presentation' => [
                "types" => [
                    'ppt', 'pptx', 'pdf'
                ],
                "max_size" => 50 * $oneMb,
            ],
            'scorm' => [
                "types" => [
                    'zip', 'rar'
                ],
                "max_size" => 500 * $oneMb,
            ]
        ];
        $config = isset($uploadConfigs[$group]) ? $uploadConfigs[$group] : $uploadConfigs['default'];

        $message="";
        if (!in_array(strtolower($file->getClientOriginalExtension()), $config['types'])) {

            throw new Exception(__("File type are not allowed"));


        }

        if ($file->getSize() > $config['max_size']) {
            throw new Exception(__("Maximum upload file size is :max_size", ['max_size' => self::formatBytes($config['max_size'])]));
        }

        if (in_array($file_extension = strtolower($file->getClientOriginalExtension()), $allowedExtsImage)) {
            if ($file_extension == "svg") {
                return true;
            }
           if (!empty($config['max_width']) or !empty($config['max_width'])) {


              $imagedata = getimagesize($file->getPathname());
                if (empty($imagedata)) {
                    throw new Exception(__("Can not get image dimensions"));
                }
                if (!empty($config['max_width']) and $imagedata[0] > $config['max_width']) {
                    throw new Exception(__("Maximum width allowed is: :number", ['number' => $config['max_width']]));
                }
                if (!empty($config['max_height']) and $imagedata[1] > $config['max_height']) {
                    throw new Exception(__("Maximum height allowed is: :number", ['number' => $config['max_height']]));
                }
            }
        }

        return true;
    }

    protected static function formatBytes($bytes, $precision = 2)
    {
        $units = array('B', 'KB', 'MB', 'GB', 'TB');

        $bytes = max($bytes, 0);
        $pow = floor(($bytes ? log($bytes) : 0) / log(1024));
        $pow = min($pow, count($units) - 1);

        // Uncomment one of the following alternatives
        $bytes /= pow(1024, $pow);

        return round($bytes, $precision) . ' ' . $units[$pow];
    }

    public function getLists(Request $request, $pagename)
    {


      //  if($pagename=='bulletin') {

            $pathlink = BulletinFile::query();

            $file_type = $request->input('file_type', 'pdf');
            $page = $request->input('page', 1);
            $s = $request->input('s');

            $offset = ($page - 1) * 32;

            $model = $pathlink;
            $model2 = $pathlink;
         //   if (!Auth::user()->hasPermissionTo("media_manage")) {
                $model->where('create_user', Auth::id());
                $model2->where('create_user', Auth::id());
          //  }

            switch ($file_type) {

                case "pdf":
                    $ext = [
                        'pdf',
                        'PDF',

                    ];
                    $model->whereIn('file_extension', $ext);
                    $model2->whereIn('file_extension', $ext);
                    break;
            }

            if ($s) {
                $model->where('file_name', 'like', '%' . ($s) . '%');
                $model2->where('file_name', 'like', '%' . ($s) . '%');
            }
            $files = $model->limit(32)->offset($offset)->orderBy('id', 'desc')->get();
            // Count
            $total = $model2->count();
            $totalPage = ceil($total / 32);
            if (!empty($files)) {
                foreach ($files as $file) {

                        $file->thumb_size = get_bulletinfile_url($file);
                        Log::info($file);
                        $file->full_size = get_bulletinfile_url($file);
                        $file->medium_size = get_bulletinfile_url($file);


                }
            }
        //}
Log::info($model);
        return $this->sendSuccess([
            'data' => $files,

            'total' => $total,
            'totalPage' => $totalPage,
            'accept' => $this->getMimeFromType($file_type)
        ]);
    }

    protected function getMimeFromType($file_type)
    {
        switch ($file_type) {
            case 'video':
                return "video/*";
                break;
            case 'presentation':
                return implode(',', [
                    'application/vnd.openxmlformats-officedocument.presentationml.presentation',
                    'application/vnd.ms-powerpoint',
                    'application/pdf'
                ]);
                break;
            case 'scorm':
                return implode(',', [
                    'application/x-gzip',
                    'application/zip',
                    'application/x-rar-compressed'
                ]);
                break;
            default:
                return "";
                break;
        }
    }

    /**
     * Check Permission Media
     *
     * @return bool
     */
    private function hasPermissionMedia()
    {
        if (Auth::id()) {
            return true;
        }
        if (Auth::user()->hasPermissionTo("media_upload")) {
            return true;
        }
        if (Auth::user()->hasPermissionTo("media_manage")) {
            return true;
        }
        return false;
    }

    public function ckeditorBrowser()
    {
        return view('Media::ckeditor');
    }

    public function removeFiles(Request $request)
    {
        $file_ids = $request->input('file_ids');
        if (empty($file_ids)) {
            return $this->sendError(__("Please select file"));
        }
        if (!$this->hasPermissionMedia()) {
            return $this->sendError(__("You don't have permission delete the file!"));
        }
        $model = MediaFile::query()->whereIn("id", $file_ids);
        if (!Auth::user()->hasPermissionTo("media_manage")) {
            $model->where('create_user', Auth::id());
        }
        $files = $model->get();
        $storage = Storage::disk('uploads');
        if (!empty($files->count())) {
            foreach ($files as $file) {
                if ($storage->exists($file->file_path)) {
                    $storage->delete($file->file_path);
                }
                $size_mores = BulletinFileHelper::$defaultSize;
                if (!empty($size_mores)) {
                    foreach ($size_mores as $size) {
                        $file_size = substr($file->file_path, 0, strrpos($file->file_path, '.')) . '-' . $size[0] . '.' . $file->file_extension;
                        if ($storage->exists($file_size)) {
                            $storage->delete($file_size);
                        }
                    }
                }
                $file->forceDelete();
            }
            return $this->sendSuccess([], __("Delete the file success!"));
        }
        return $this->sendError(__("File not found!"));
    }
}
